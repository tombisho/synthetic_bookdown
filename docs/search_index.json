[["analysis.html", "Chapter 4 Analysis with synthetic data 4.1 Getting set up 4.2 Create synthetic dataset 4.3 Start DSLite local instance 4.4 Write some analysis code 4.5 Run corrected code on real data", " Chapter 4 Analysis with synthetic data In this section we describe how we can use a copy of the synthetic data to help users write DataSHIELD analysis code. Again we will make use of an existing data set. Recall that the objective here is to use a synthetic copy of already harmonised real data that is then made available to the analyst on the client side. This synthetic data set can be loaded into DSLite, a special client side implementation of server side DataSHIELD used for development purposes. DSLite is will only take standard DataSHIELD functions as input, but the user can have full access to the data through a special interface. This is acceptable in this situation as the data are synthetic and designed to be non-disclosive. Therefore the user has the chance to write DataSHIELD code but see the complete results of each step. This makes it easier to develop the code. The steps are summarised as: User requests synthetic copy of real data Synthetic data generated &amp; available on client side Synthetic data placed in DSLite environment that simulates server side DataSHIELD environment Develop DataSHIELD code against synthetic data in DSLite (with full access to synthetic data) When DataSHIELD code is complete, run code against real data on server side Figure 4.1: Prototyping DataSHIELD analysis using synthetic data on DSLite 4.1 Getting set up Let us assume that the DASIM1 dataset has previously been harmonised and is held on a server. As normal with DataSHIELD, we do not have complete access to the full data set but want to do some analysis on it. Using the method described above, the first thing to do is generate a synthetic version of the data that we can fully access. To do this we will use the same steps that were shown in 3 We build our log in object builder &lt;- DSI::newDSLoginBuilder() builder$append(server=&quot;server1&quot;, url=&quot;https://opal-sandbox.mrc-epid.cam.ac.uk&quot;, user=&quot;dsuser&quot;, password=&quot;P@ssw0rd&quot;, table = &quot;DASIM.DASIM1&quot;) logindata &lt;- builder$build() Then perform the log in to the server: library(DSOpal) if(exists(&quot;connections&quot;)){ datashield.logout(conns = connections) } connections &lt;- datashield.login(logins=logindata, assign = TRUE) 4.2 Create synthetic dataset The DASIM1 dataset is relatively small (i.e. around 10 columns). This is probably also true of many harmonised data sets. Therefore we can just create a synthetic version of it in its entirety without specifying a subset of columns: library(dsSyntheticClient) synth_data = ds.syn(data = &quot;D&quot;, method = &quot;cart&quot;, m = 1, seed = 123) # N.B. you may need to replace `server1` if you have named your connection differently DASIM = synth_data$server1$syn 4.3 Start DSLite local instance Here we start our DSLite instance, and load the DASIM data. Recall that this simulates the server side environment on your client, but with the ability to access all the data. Therefore it is ideal for our requirement to build a code pipeline while being able to see the data: this helps with the debugging and logic checking process. library(DSLite) library(dsBaseClient) dslite.server &lt;- newDSLiteServer(tables=list(DASIM=DASIM)) dslite.server$config(defaultDSConfiguration(include=c(&quot;dsBase&quot;, &quot;dsSynthetic&quot;))) builder &lt;- DSI::newDSLoginBuilder() builder$append(server=&quot;server1&quot;, url=&quot;dslite.server&quot;, table = &quot;DASIM&quot;, driver = &quot;DSLiteDriver&quot;) logindata &lt;- builder$build() if(exists(&quot;connections&quot;)){ datashield.logout(conns = connections) } connections &lt;- datashield.login(logins=logindata, assign = TRUE) We can now check for ourselves that our DASIM data is in the DSLite server: ds.summary(&#39;D&#39;) ## $server1 ## $server1$class ## [1] &quot;data.frame&quot; ## ## $server1$`number of rows` ## [1] 10000 ## ## $server1$`number of columns` ## [1] 10 ## ## $server1$`variables held` ## [1] &quot;LAB_TSC&quot; &quot;LAB_TRIG&quot; &quot;LAB_HDL&quot; ## [4] &quot;LAB_GLUC_FASTING&quot; &quot;PM_BMI_CONTINUOUS&quot; &quot;DIS_CVA&quot; ## [7] &quot;DIS_DIAB&quot; &quot;DIS_AMI&quot; &quot;GENDER&quot; ## [10] &quot;PM_BMI_CATEGORICAL&quot; 4.4 Write some analysis code Now suppose we want to subset the DASIM data into men and women. We can use the ds.subset function: ds.subset(x=&quot;D&quot;, subset = &quot;women&quot;, logicalOperator = &quot;==&quot;, threshold = 1) With DSLite we have the chance to look at actually what happened in detail: # N.B. you may need to replace `server1` if you have named your connection differently women = getDSLiteData(conns = connections, symbol = &quot;women&quot;)$server1 head(women) ## LAB_TSC LAB_TRIG LAB_HDL LAB_GLUC_FASTING PM_BMI_CONTINUOUS DIS_CVA ## 1 5.789247 2.8768744 1.261161 2.581984 21.42926 0 ## 10 5.338826 0.7885768 1.609632 4.168195 31.29042 0 ## 100 4.334922 2.5569000 1.097729 5.143301 19.73722 0 ## 1000 6.311116 1.3648574 1.955236 3.813377 20.91334 0 ## 10000 8.346605 1.9988410 1.592837 3.683666 24.18755 0 ## 1001 5.139364 1.6111131 1.569089 4.860442 33.14083 0 ## DIS_DIAB DIS_AMI GENDER PM_BMI_CATEGORICAL ## 1 0 0 0 1 ## 10 0 0 0 3 ## 100 0 0 1 1 ## 1000 0 0 0 1 ## 10000 0 0 1 1 ## 1001 0 0 1 3 This doesn’t look quite right. There are still rows with GENDER == 0. There is an error in our code (we didn’t specify GENDER as part of the logicalOperator parameter) but didn’t get a warning. Let’s make a correction and try again: ds.subset(x=&quot;D&quot;, subset = &quot;women&quot;, logicalOperator = &quot;GENDER==&quot;, threshold = 1) # get the data again # N.B. you may need to replace `server1` if you have named your connection differently women = getDSLiteData(conns = connections, symbol = &quot;women&quot;)$server1 head(women) ## LAB_TSC LAB_TRIG LAB_HDL LAB_GLUC_FASTING PM_BMI_CONTINUOUS DIS_CVA ## 100 4.334922 2.5569000 1.097729 5.143301 19.73722 0 ## 10000 8.346605 1.9988410 1.592837 3.683666 24.18755 0 ## 1001 5.139364 1.6111131 1.569089 4.860442 33.14083 0 ## 1003 7.786409 1.9573124 1.995147 5.134080 20.86961 0 ## 1005 4.725401 0.2427703 1.864381 4.569501 24.25248 0 ## 1008 6.982919 2.3029647 1.787483 6.168527 29.31199 0 ## DIS_DIAB DIS_AMI GENDER PM_BMI_CATEGORICAL ## 100 0 0 1 1 ## 10000 0 0 1 1 ## 1001 0 0 1 3 ## 1003 0 0 1 1 ## 1005 0 0 1 1 ## 1008 0 0 1 2 This now looks much better. 4.5 Run corrected code on real data We can also compare results obtained via DataSHIELD with results on the actual data: from_server = ds.glm(formula = &quot;DIS_DIAB~PM_BMI_CONTINUOUS+LAB_TSC+LAB_HDL&quot;, data = &quot;women&quot;, family = &quot;binomial&quot;) from_local = glm(formula = &quot;DIS_DIAB~PM_BMI_CONTINUOUS+LAB_TSC+LAB_HDL&quot;, data = women, family = &quot;binomial&quot;) from_server$coefficients ## Estimate Std. Error z-value p-value low0.95CI.LP ## (Intercept) -5.6826384 1.35495998 -4.193953 2.741348e-05 -8.33831120 ## PM_BMI_CONTINUOUS 0.1127588 0.03243486 3.476470 5.080601e-04 0.04918768 ## LAB_TSC -0.2313336 0.13676712 -1.691441 9.075255e-02 -0.49939219 ## LAB_HDL -0.4883902 0.41235582 -1.184390 2.362586e-01 -1.29659279 ## high0.95CI.LP P_OR low0.95CI.P_OR high0.95CI.P_OR ## (Intercept) -3.02696569 0.003393012 0.0002391187 0.04622241 ## PM_BMI_CONTINUOUS 0.17633000 1.119361953 1.0504174725 1.19283163 ## LAB_TSC 0.03672508 0.793474753 0.6068994262 1.03740778 ## LAB_HDL 0.31981231 0.613613370 0.2734619494 1.37686932 from_local$coefficients ## (Intercept) PM_BMI_CONTINUOUS LAB_TSC LAB_HDL ## -5.6826384 0.1127588 -0.2313336 -0.4883902 "]]
